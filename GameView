public class GameView extends View {
    private Bird bird;
    private Handler handler;
    private Runnable r;
    //create an array of water pipes
    private ArrayList<Pipe> arrPipes;
    private int sumpipe, distance; //distance between pipes where bird passing
    private int score, bestscore = 0;
    private boolean start;
    private Context context;
    private int soundJump;
    private int soundScore;
    private int soundHit;
    private boolean soundHitPlayed = false;
    private float volume;
    private boolean loadedsound;
    private SoundPool soundPool;


    public GameView(Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
        //Declare the variable score and i    private boolean loadedsound;nitialize its value to 0

        //get the best score
        this.context = context;
        SharedPreferences sp = context.getSharedPreferences("gamesetting", Context.MODE_PRIVATE);

        if(sp!=null) {
            bestscore = sp.getInt("bestscore", 0);
        }

        score = 0;
        start = false;

        initBird();
        initPipe();

        /**Music*/
        //create a loop to update the interface
        handler = new Handler();
        r = (Runnable) () -> { invalidate();
        };

        if(Build.VERSION.SDK_INT>=21) {
            AudioAttributes audioAttributes = new AudioAttributes.Builder()
                    .setUsage(AudioAttributes.USAGE_GAME)
                    .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)
                    .build();
            SoundPool.Builder builder = new SoundPool.Builder();
            builder.setAudioAttributes(audioAttributes).setMaxStreams(5);
            this.soundPool = builder.build();
        }else{
            soundPool = new SoundPool(5, AudioManager.STREAM_MUSIC, 0);
        }
        this.soundPool.setOnLoadCompleteListener(new SoundPool.OnLoadCompleteListener() {
            @Override
            public void onLoadComplete(SoundPool soundPool, int sampleId, int status) {
                loadedsound = true;
            }
        });
        soundJump = this.soundPool.load(context, R.raw.jump_02, 3);
        soundScore = this.soundPool.load(context, R.raw.score, 2);
        soundHit = this.soundPool.load(context, R.raw.over, 2);
    }

    private void initPipe() {
        sumpipe = 6;
        distance = 400*Constants.SCREEN_HEIGHT/1920;
        arrPipes = new ArrayList<>();
        //initialize the initial positions of the water pipes
        for (int i = 0; i < sumpipe; i++) {
            if(i<sumpipe/2) {
                //initialize the initial positions of the water pipes
                this.arrPipes.add(new Pipe(Constants.SCREEN_WIDTH+i*((Constants.SCREEN_WIDTH+200*Constants.SCREEN_WIDTH/1080)/(sumpipe/2)),
                        0, 200*Constants.SCREEN_WIDTH/1080, Constants.SCREEN_HEIGHT/2));
                this.arrPipes.get(this.arrPipes.size()-1).setBm(BitmapFactory.decodeResource(this.getResources(), R.drawable.ice1));
                this.arrPipes.get(this.arrPipes.size()-1).randomY();
            }else {
                this.arrPipes.add(new Pipe(this.arrPipes.get(i-sumpipe/2).getX(), this.arrPipes.get(i-sumpipe/2).getY()
                +this.arrPipes.get(i-sumpipe/2).getHeight() + this.distance, 200*Constants.SCREEN_WIDTH/1080,  Constants.SCREEN_HEIGHT/2));
                this.arrPipes.get(this.arrPipes.size()-1).setBm(BitmapFactory.decodeResource(this.getResources(), R.drawable.ice2));
            }
        }
    }

    private void initBird() {

        //Create a bird on GameView
        bird = new Bird();

        //set width and height of the bird
        bird.setWidth(100*Constants.SCREEN_WIDTH/1080);
        bird.setHeight(100*Constants.SCREEN_HEIGHT/1920);

        //set display coordinates of the bird
        bird.setX(100*Constants.SCREEN_WIDTH/1080);
        bird.setY(Constants.SCREEN_HEIGHT/2-bird.getHeight()/2);

        //create array Bitmap to set for the arrBm property of Bird
        ArrayList<Bitmap> arrBms = new ArrayList<>();
        arrBms.add(BitmapFactory.decodeResource(this.getResources(), R.drawable.bird1));
        arrBms.add(BitmapFactory.decodeResource(this.getResources(), R.drawable.bird2));

        //set the value for Bird's arrBms property
        bird.setArrBms(arrBms);
    }

    public void draw(Canvas canvas) {
        super.draw(canvas);
        if (start) {
            //call the bird's draw method to render the bird on the Gameview
            bird.draw(canvas);
            for (int i = 0; i < sumpipe; i++) {
                if(bird.getRect().intersect(arrPipes.get(i).getRect())||bird.getY()-bird.getHeight()<0||bird.getY()>Constants.SCREEN_HEIGHT){
                    Pipe.speed = 0;

                    //put the sound code when the bird hit the pipe//
                    if(soundHitPlayed==false){
                        int soundHit = this.soundPool.play(this.soundHit, (float)0.5, (float)0.5, 1, 0, 1f);
                        soundHitPlayed = true;
                    }
                    MainActivity.txt_score_over.setText(MainActivity.txt_score.getText());
                    MainActivity.txt_best_score.setText("Best : " + bestscore);
                    MainActivity.txt_score.setVisibility(INVISIBLE);
                    MainActivity.rl_game_over.setVisibility(VISIBLE );
                }
                //determine the collision conditions

                //Defining the conditions when to increase the score
                if (this.bird.getX() + this.bird.getWidth() > arrPipes.get(i).getX() + arrPipes.get(i).getWidth() / 2
                        && this.bird.getX() + this.bird.getWidth() <= arrPipes.get(i).getX() + arrPipes.get(i).getWidth() / 2 + Pipe.speed
                        && i < sumpipe / 2) {
                    score++;

                    //put the sound code when the bird get score//
                    if(loadedsound) {
                        int streamId2 = this.soundPool.play(this.soundScore, (float)0.5, (float)0.5, 2,0, 1f);
                    }
                    if(score>bestscore) {
                        bestscore = score;
                        //save score
                        SharedPreferences sp = context.getSharedPreferences("gamesetting", Context.MODE_PRIVATE);
                        SharedPreferences.Editor editor = sp.edit();
                        editor.putInt("bestscore", bestscore);
                        editor.apply();
                    }
                    MainActivity.txt_score.setText("" + score);
                }
                //if the water pipe comes out of the screen, reset the position
                if (this.arrPipes.get(i).getX() < -arrPipes.get(i).getWidth()) {
                    this.arrPipes.get(i).setX(Constants.SCREEN_WIDTH);
                    if (i < sumpipe / 2) {
                        arrPipes.get(i).randomY();
                    } else {
                        arrPipes.get(i).setY(this.arrPipes.get(i - sumpipe / 2).getY()
                                + this.arrPipes.get(i - sumpipe / 2).getHeight() + this.distance);
                    }
                }
                this.arrPipes.get(i).draw(canvas);
            }
        }else{
            if(bird.getY()>Constants.SCREEN_HEIGHT/2) {
                bird.setDrop(-15*Constants.SCREEN_HEIGHT/1920);
            }
            bird.draw(canvas);
        }

        // Paint to control sensitivity
//        Paint paint = new Paint();
//        paint.setColor(Color.BLUE);
//        canvas.drawRect(bird.getRect(), paint);
//        for (int i = 0; i < arrPipes.size(); i++){
//            canvas.drawRect(arrPipes.get(i).getRect(), paint);
//        }

        //update every 0.01 seconds
        handler.postDelayed(r, 10);
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {

        //make the Bird soar when touch screen
        if(event.getAction() == MotionEvent.ACTION_DOWN){
            bird.setDrop(-14);
            if(loadedsound) {
                int streamId3 = this.soundPool.play(this.soundJump, (float)0.5, (float)0.5, 3,0, 1f);
            }
        }
        return true;
    }

    public boolean isStart() {
        return start;
    }

    public void setStart(boolean start) {
        this.start = start;
    }

    public void reset() {
        MainActivity.txt_score.setText("0");
        score=0;
        initPipe();
        initBird();
        soundHitPlayed = false;
    }
}
